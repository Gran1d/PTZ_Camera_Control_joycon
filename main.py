import pygame
from obswebsocket import obsws, requests
from onvif import ONVIFCamera
from dotenv import load_dotenv
import os
import time
import json

PRESETS_FILE = "presets.json"
manual_control_enabled = True
user_interrupted_move = False

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ptz_speed = float(os.getenv("PTZ_SPEED", 0.5))
zoom_speed = float(os.getenv("ZOOM_SPEED", 0.5))

# OBS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
OBS_HOST = os.getenv("OBS_HOST")
OBS_PORT = int(os.getenv("OBS_PORT"))
OBS_PASSWORD = os.getenv("OBS_PASSWORD")

# –ö–∞–º–µ—Ä—ã ONVIF
cameras = [
    {
        'ip': os.getenv("CAM1_IP"),
        'port': int(os.getenv("CAM1_PORT")),
        'user': os.getenv("CAM1_USER"),
        'pass': os.getenv("CAM1_PASS")
    },
    {
        'ip': os.getenv("CAM2_IP"),
        'port': int(os.getenv("CAM2_PORT")),
        'user': os.getenv("CAM2_USER"),
        'pass': os.getenv("CAM2_PASS")
    }
]

current_camera_index = 0

def initialize_camera(index):
    global camera, media_service, ptz_service, media_profile, token
    cam = cameras[index]
    camera = ONVIFCamera(cam['ip'], cam['port'], cam['user'], cam['pass'])
    media_service = camera.create_media_service()
    ptz_service = camera.create_ptz_service()
    media_profile = media_service.GetProfiles()[0]
    token = media_profile.token
    print(f"üì∑ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–∞–º–µ—Ä–µ {index + 1}: {cam['ip']}")

initialize_camera(current_camera_index)

# OBS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
ws = obsws(OBS_HOST, OBS_PORT, OBS_PASSWORD)
try:
    ws.connect()
    scenes_response = ws.call(requests.GetSceneList())
    scenes = [scene['sceneName'] for scene in scenes_response.getScenes()]
    scenes.reverse()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ OBS")
    print(f"–°—Ü–µ–Ω—ã: {scenes}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OBS: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame –∏ –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤
pygame.init()
pygame.joystick.init()

joysticks = {}
for i in range(pygame.joystick.get_count()):
    js = pygame.joystick.Joystick(i)
    js.init()
    joysticks[i] = js
    print(f"üéÆ –ì–µ–π–º–ø–∞–¥ {i}: {js.get_name()}")

def save_preset(camera_index, ptz_position):
    try:
        with open(PRESETS_FILE, "r") as f:
            presets = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        presets = {}

    presets[str(camera_index)] = ptz_position

    with open(PRESETS_FILE, "w") as f:
        json.dump(presets, f, indent=4)

    print(f"üíæ –ü—Ä–µ—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã {camera_index + 1}")

def load_preset(camera_index):
    try:
        with open(PRESETS_FILE, "r") as f:
            presets = json.load(f)
        return presets.get(str(camera_index), None)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def move_to_preset(preset):
    global user_interrupted_move
    if not preset:
        print("‚ùå –ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if current_camera_index == 0:
        print("‚õî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
        return

    user_interrupted_move = False

    request = ptz_service.create_type('AbsoluteMove')
    request.ProfileToken = token
    request.Position = {
        'PanTilt': {
            'x': preset['pan'],
            'y': preset['tilt']
        },
        'Zoom': {
            'x': preset['zoom']
        }
    }
    request.Speed = {
        'PanTilt': {'x': 1.0, 'y': 1.0},
        'Zoom': {'x': 1.0}
    }

    ptz_service.AbsoluteMove(request)
    print("üìç –î–≤–∏–∂–µ–Ω–∏–µ –∫ –ø—Ä–µ—Å–µ—Ç—É –Ω–∞—á–∞—Ç–æ (–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)")

    # –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    while not user_interrupted_move:
        status = ptz_service.GetStatus({'ProfileToken': token})
        current_pan = status.Position.PanTilt.x
        current_tilt = status.Position.PanTilt.y
        current_zoom = status.Position.Zoom.x

        if abs(current_pan - preset['pan']) < 0.01 and abs(current_tilt - preset['tilt']) < 0.01 and abs(current_zoom - preset['zoom']) < 0.01:
            print("‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –ø—Ä–µ—Å–µ—Ç–∞")
            break

        time.sleep(0.1)

def move_camera(pan, tilt, zoom):
    global user_interrupted_move
    user_interrupted_move = True
    request = ptz_service.create_type('ContinuousMove')
    request.ProfileToken = token

    # –î–ª—è –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã –∑–∞–ø—Ä–µ—â–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ (–ø–∞–Ω–æ—Ä–∞–º—É –∏ –Ω–∞–∫–ª–æ–Ω), –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑—É–º
    if current_camera_index == 0:
        request.Velocity = {
            'PanTilt': {'x': 0, 'y': 0},  # –î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
            'Zoom': {'x': zoom}  # –ó—É–º –æ—Å—Ç–∞—ë—Ç—Å—è
        }
    else:
        request.Velocity = {
            'PanTilt': {'x': pan, 'y': tilt},  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–º–µ—Ä ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ
            'Zoom': {'x': zoom}  # –ó—É–º –æ—Å—Ç–∞—ë—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –∫–∞–º–µ—Ä
        }

    ptz_service.ContinuousMove(request)

def stop_camera():
    request = ptz_service.create_type('Stop')
    request.ProfileToken = token
    request.PanTilt = True
    request.Zoom = True
    ptz_service.Stop(request)

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
try:
    while True:
        pygame.event.pump()
        for event in pygame.event.get():
            if event.type == pygame.JOYBUTTONDOWN:
                joy_id = event.joy
                button = event.button
                print(f"[{joy_id}] –ö–Ω–æ–ø–∫–∞ {button} –Ω–∞–∂–∞—Ç–∞")

                if joy_id == 0:
                    if button == 0:
                        ws.call(requests.SetCurrentPreviewScene(sceneName=scenes[0]))
                    elif button == 1:
                        ws.call(requests.SetCurrentPreviewScene(sceneName=scenes[1]))
                    elif button == 2:
                        ws.call(requests.SetCurrentPreviewScene(sceneName=scenes[2]))
                    elif button == 3:
                        ws.call(requests.SetCurrentPreviewScene(sceneName=scenes[3]))
                    elif button == 14:
                        ptz_speed = max(0.1, ptz_speed - 0.1)
                        print(f"üîΩ –°–∫–æ—Ä–æ—Å—Ç—å PTZ —É–º–µ–Ω—å—à–µ–Ω–∞: {ptz_speed}")
                    elif button == 15:
                        ptz_speed = min(1.0, ptz_speed + 0.1)
                        print(f"üîº –°–∫–æ—Ä–æ—Å—Ç—å PTZ —É–≤–µ–ª–∏—á–µ–Ω–∞: {ptz_speed}")

                elif joy_id == 1:
                    if button == 0:
                        current_camera_index = 0
                        initialize_camera(current_camera_index)
                    elif button == 1:
                        current_camera_index = 1
                        initialize_camera(current_camera_index)
                    elif button == 2:
                        if current_camera_index != 0:
                            status = ptz_service.GetStatus({'ProfileToken': token})
                            pan = status.Position.PanTilt.x
                            tilt = status.Position.PanTilt.y
                            zoom = status.Position.Zoom.x
                            save_preset(current_camera_index, {'pan': pan, 'tilt': tilt, 'zoom': zoom})
                        else:
                            print("‚õî –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
                    elif button == 3:
                        preset = load_preset(current_camera_index)
                        move_to_preset(preset)
                    elif button == 9:
                        ws.call(requests.TriggerStudioModeTransition())
                    elif button == 14:
                        zoom_speed = max(0.1, zoom_speed - 0.1)
                        print(f"üîΩ –°–∫–æ—Ä–æ—Å—Ç—å Zoom —É–º–µ–Ω—å—à–µ–Ω–∞: {zoom_speed}")
                    elif button == 15:
                        zoom_speed = min(1.0, zoom_speed + 0.1)
                        print(f"üîº –°–∫–æ—Ä–æ—Å—Ç—å Zoom —É–≤–µ–ª–∏—á–µ–Ω–∞: {zoom_speed}")

            elif event.type == pygame.JOYHATMOTION:
                joy_id = event.joy
                x, y = event.value
                print(f"[{joy_id}] HAT: ({x}, {y})")

        if manual_control_enabled:

            tilt, pan = joysticks[0].get_hat(0)
            pan *= ptz_speed
            tilt *= ptz_speed

            zoom_dir, _ = joysticks[1].get_hat(0)
            zoom = zoom_dir * zoom_speed

            if pan != 0 or tilt != 0 or zoom != 0:
                move_camera(pan, -tilt, zoom)
            else:
                stop_camera()

        time.sleep(0.01)

except KeyboardInterrupt:
    stop_camera()
    print("\nüö™ –í—ã—Ö–æ–¥")
